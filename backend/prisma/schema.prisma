// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  phone     String?
  role      Role      @default(USER)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  addresses Address[]
  orders    Order[]

  @@map("users")
}

model Address {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  type       String   // 'shipping' or 'billing'
  street     String
  city       String
  postalCode String   @map("postal_code")
  country    String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id])
  ordersAsShipping Order[] @relation("ShippingAddress")
  ordersAsBilling  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Order {
  id                String      @id @default(uuid())
  userId            String      @map("user_id")
  status           String      // 'pending', 'processing', 'shipped', 'delivered', 'cancelled'
  total            Decimal     @db.Decimal(10, 2)
  shippingAddressId String     @map("shipping_address_id")
  billingAddressId  String     @map("billing_address_id")
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  user             User        @relation(fields: [userId], references: [id])
  shippingAddress  Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress   Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items            OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String      @db.Text
  price       Decimal     @db.Decimal(10, 2)
  image       String?
  stock       Int         @default(0)
  categoryId  String      @map("category_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]

  @@map("products")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  slug        String    @unique
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  products    Product[]

  @@map("categories")
}

enum Role {
  USER
  ADMIN
}
